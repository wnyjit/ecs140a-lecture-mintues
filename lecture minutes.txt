================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 4 - 1 tuesday lecture +=+=+=+=+=+=+=+=
logistics - 3

intro to programming languages - 25
	criteria for a language - 38
	why so many languages - 42
	paradigms - 46
	what makes a langauge - 1.08
	the compiler - 1.13
		lexical analysis - 1.15
		parsing / syntactic analysis - 1.17
+=+=+=+=+=+=+=+= 4 - 1 tuesday lecture +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 4 - 3 thursday lecture +=+=+=+=+=+=+=+=
continuing the compiler - 4
	parsing - 5
		diagramming a sentence - 6
		parse tree - 9
	semantic analysis - 13

context free grammars CFG - 26
	terminals, non-terminals, production / grammar rules / start non-terminal - 27
		examples - 28

derivations - 35
	parse tree,, graphical representationof derivation process - 45
	example 1 - 45
	example 2 - 50
		does the string exist in the language? - 55

backus-naur form BNF - 1.01
	grammar for arithmetic expressions - 1.03
		example - 1.12
+=+=+=+=+=+=+=+= 4 - 3 thursday lecture +=+=+=+=+=+=+=+=

+=+=+=+=+=+=+=+= 4 - 3 thursday discussion +=+=+=+=+=+=+=+=
BNF examples - 4

ambiguity,,, ambiguous grammar - 18
	solving ambiguity in our initial BNF approach - 20
	corrected version 1 - 35
+=+=+=+=+=+=+=+= 4 - 3 thursday discussion +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 4 - 8 tuesday lecture +=+=+=+=+=+=+=+=
ambiguous parse trees continued - 4
	corrected version 2 - 17

extended backus-naur form EBNF - 26
	translation between EBNF -> BNF vice versa - 30

introduction to GO - 51
+=+=+=+=+=+=+=+= 4 - 8 tuesday lecture +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 4 - 10 thursday lecture +=+=+=+=+=+=+=+=
go introduction - 3
	scope - 4
	common data types - 28

interfaces - 55
	concrete types - 56
	abstract types - 57
		interface - 1.02
		empty interface - 1.09

type extensions - 1.12
type switches - 1.18
+=+=+=+=+=+=+=+= 4 - 10 thursday lecture +=+=+=+=+=+=+=+=

+=+=+=+=+=+=+=+= 4 - 10 thursday discussion +=+=+=+=+=+=+=+=
homework help - 3
	you are only allowed to use GO syntax discussed in class - 3
	its an auto grader, so... - 4

	q1. triangle testing - 7
		you need 100% coverage & pass - 10
	q2. minimum finding & tests - 13
		you need 100% coverage & pass - 14
		what the cover command does - 16

			HOW ASSIGNMENTS ARE GRADED,,, hidden test cases so dont try to skimp out - 17

	q3. NFA verification - 22
	q4. intro to AST & depth test - 38
+=+=+=+=+=+=+=+= 4 - 10 thursday discussion +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 4 - 15 tuesday lecture +=+=+=+=+=+=+=+=
type assertions - 3
type switch - 8
function values - 13
closures / anonymous functions - 22
	function returning anonymous function - 25
lifetime & scope - 32
	fibonacci example - 53
defer - 1.02
type embeds - 1.04
+=+=+=+=+=+=+=+= 4 - 15 tuesday lecture +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 4 - 17 thursday lecture +=+=+=+=+=+=+=+=
benefits of types - 3
type equivalence - 7
	structural equivalence - 8
	name equivalence - 11
		explicit casting - 14

	type checking - 15
		static / compile time check - 16
		runtime / dynamic check - 16

parsing - 34
	top down parsing - 34
		names of new notations, E, T, F, epsilon, terminal, id - 37
		example - 37
		recursive descent parsing - 42
		predictive parser - 46
			LL(1) - 47
			recursive descent parsing - 53
					what makes a valid tree and example of invalid - 58
			FIRST sets,,,, how making parse table - 1.00
				how to handle terminal, nonterminal, epsilon - 1.02
				example building - 1.04
			FOLLOW sets - 1.15
				$, A, alpha, B, beta - 1.16
				epsilon handling - 1.21
+=+=+=+=+=+=+=+= 4 - 17 thursday lecture +=+=+=+=+=+=+=+=

+=+=+=+=+=+=+=+= 4 - 17 thursday discussion +=+=+=+=+=+=+=+=
homework help
	AST package covering for q4,q5 *important* - 5
	q5. simplify - 5
		AST continued - 15
	q6. branch - 21
	q7. rewrite - 31
+=+=+=+=+=+=+=+= 4 - 17 thursday discussion +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 4 - 22 tuesday lecture +=+=+=+=+=+=+=+=
continuing parsing - 3
	follow sets - 3
		examples - 5
	parsing table - 21
		filling the table - 22
		examples - 35
		code form,,, table driven predictive parser - 42
	not all grammars are LL(1) - 46

	optional readings,, most material is from this book - 49
		what parser to go parser uses - 49

	left recursion - 50
		left recursion cannot compute first sets - 50
		eliminating immediate left recursion - 51

lisp lisp lisp lisp lisp lisp lisp - 1.02
	lisp background of lisp - 1.02
	on hw2, only use these - 1.04
	s-expression,,, symbolic expression - 1.05
		atoms and lists - 1.05
		rules of evaluation - 1.06
	into to clisp programming - 1.09
		why you shouldnt use setq on the hw - 1.11
		list lengths and equality - 1.18
		quote - 1.21
+=+=+=+=+=+=+=+= 4 - 22 tuesday lecture +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 4 - 24 thursday lecture +=+=+=+=+=+=+=+=
quote continued - 3

basic list operations: car, cdr, cons - 6

	internal representation of lists - 21
	dot notation - 25
	more operations: list, append - 27

user defined functions - 33

predicate operations - 49

logical operations - 53
if construct - 56
cond construct "I like it better" - 1.06

let construct - 1.20
+=+=+=+=+=+=+=+= 4 - 24 thursday lecture +=+=+=+=+=+=+=+=

+=+=+=+=+=+=+=+= 4 - 24 thursday discussion +=+=+=+=+=+=+=+=
let construct - 3
let * construct - 12

practice exercise - 16

Delay or force evalutation: eval, apply, funcall - 20
	eval example 1 - 24
		"eval only goes one step forward" - 30
	eval example 2 - 35
	apply & funcall and their syntax - 43
		example - 47
+=+=+=+=+=+=+=+= 4 - 24 thursday discussion +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 4 - 29 tuesday lecture +=+=+=+=+=+=+=+=
cotinuing apply & funcall example from last week - 3
		when to use funcall or apply - 12
			"if your more comfortable with one then just use it" - 13

anonymous functions / lamdba functions - 14
	lambda and funcall,,, dont actually need funcall - 17
		but they do sometimes - 19
	lamda and apply - 21

high-order functions - 22
	mapcar (Great for matrix) - 23
		"its doing the looping for you" - 27
		mapcar & lambda - 29
		# poundsign syntax - 31
	maplist - 39
	reduce - 45
	think about prefix function when doing match in the hw - 48

dot product example - 49

how to use trace function - 59

closures - 1.05
	even generation example - 1.11
+=+=+=+=+=+=+=+= 4 - 29 tuesday lecture +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 5 - 1 thursday lecture +=+=+=+=+=+=+=+=
closures recap - 3
	even generator - 3

timestamps example - 14

translation in go - 26

what will be on the midterm - 34
	you are allowed notes - 39
	bring some form of ID - 46

prolog prolog prolog prolog pro log - 49
	building blocks: constants, variables, compound terms - 51
	facts - 56
	parent example - 57
	rules - 1.10
+=+=+=+=+=+=+=+= 5 - 1 thursday lecture +=+=+=+=+=+=+=+=

+=+=+=+=+=+=+=+= 5 - 1 thursday discussion +=+=+=+=+=+=+=+=
no one shows to class lol rip
hw1 covering - 3
	q1,q2 are not covered - 3
	q4 depth - 4
	q5 simplify - 6
	q6 branch - 12
	q7 rewrite - 14
	q3 nfa - 20
+=+=+=+=+=+=+=+= 5 - 1 thursday discussion +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 5 - 6 lecture +=+=+=+=+=+=+=+=
prolog continued - 3
	rules, terms, conditions, fact - 4 
	goals/queries - 5
		underscores/_ - 7
	unification - 8
		when it occurs - 10
	how prolog is evaluated,,, control - 15
		example 1 on goals - 16
			drawing out steps on board - 19
			coding - 35
	using trace in prolog - 1.05
	lists - 1.12
		unifying lists - 1.17
+=+=+=+=+=+=+=+= 5 - 6 lecture +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 5 - 8 lecture +=+=+=+=+=+=+=+=
prolog continued - 4
	unifying lists continued - 4
	append - 8
		code for append - 16
	reverse - 29
		code for reverse - 30
	recreating reverse? - 42
	recreating append? - 51
	other predicates - 1.02
		append, member, length, reverse, select - 1.02
	arithmatic in prolog - 1.05
	numeric comparisons - 1.12
+=+=+=+=+=+=+=+= 5 - 8 lecture +=+=+=+=+=+=+=+=

+=+=+=+=+=+=+=+= 5 - 8 discussion +=+=+=+=+=+=+=+=
lisp hw covering - 3
	q1 mmm - 3
	q2 qsort - 6
	q3 match - 10
	q4 nfa - 17
	q5 matrix - 22
+=+=+=+=+=+=+=+= 5 - 8 discussion +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 5 - 13 lecture +=+=+=+=+=+=+=+=
prefix suffix - 6

how does search work example 1 - 7
how does search work example 2 - 8
how does search work example 2 - 25

order of goals and rules - 32

length of list - 40

cuts - 48
	green cut red cut - 50
	green cut example - 52
	red cut example - 57
	example - 1.08
+=+=+=+=+=+=+=+= 5 - 13 lecture +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================

+=+=+=+=+=+=+=+= 5 - 15 lecture +=+=+=+=+=+=+=+=
the only professor who doesnt realease the recording of us taking the test :(
+=+=+=+=+=+=+=+= 5 - 15 lecture +=+=+=+=+=+=+=+=

+=+=+=+=+=+=+=+= 5 - 15 discussion +=+=+=+=+=+=+=+=
practice exercise 1,,, factorial - 6
practice exercise 2,,, fibonaci - 12
practice exercise 3,,, quicksort - 17
	example 1 - 22
practice exercise 4,,, prefix suffix - 26
+=+=+=+=+=+=+=+= 5 - 15 discussion +=+=+=+=+=+=+=+=

================================================================================================================================
================================================================================================================================
